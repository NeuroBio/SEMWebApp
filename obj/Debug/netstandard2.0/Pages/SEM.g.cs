#pragma checksum "D:\Documents\C#\SEMWebApp\Pages\SEM.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8976f2792fd9c4fbb1f0475cd2eed0a96738fa14"
// <auto-generated/>
#pragma warning disable 1591
namespace SEMWebApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using SEMWebApp;
    using SEMWebApp.Shared;
    using SEMStandard;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/SEM")]
    public class SEM : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>Song Evolution Model</h1>\n<hr>\n\n");
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "style", "width:950px");
            builder.AddContent(3, "\n    ");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "container");
            builder.AddContent(6, "\n        ");
            builder.OpenElement(7, "div");
            builder.AddAttribute(8, "class", "container");
            builder.AddContent(9, "\n        ");
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "style", "float:left;width:200px;");
            builder.AddContent(12, "\n                ");
            builder.AddMarkupContent(13, "<b>Learning Strategy</b><br>\n                ");
            builder.OpenElement(14, "input");
            builder.AddAttribute(15, "type", "radio");
            builder.AddAttribute(16, "name", "LearnStrat");
            builder.AddAttribute(17, "value", "Add");
            builder.AddAttribute(18, "checked", LearnStrat == "Add");
            builder.AddAttribute(19, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLearning("Add")));
            builder.CloseElement();
            builder.AddMarkupContent(20, "Add<br>\n                ");
            builder.OpenElement(21, "input");
            builder.AddAttribute(22, "type", "radio");
            builder.AddAttribute(23, "name", "LearnStrat");
            builder.AddAttribute(24, "value", "AddForget");
            builder.AddAttribute(25, "checked", LearnStrat == "AddForget");
            builder.AddAttribute(26, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLearning("AddForget")));
            builder.CloseElement();
            builder.AddMarkupContent(27, "AddForget<br>\n                ");
            builder.OpenElement(28, "input");
            builder.AddAttribute(29, "type", "radio");
            builder.AddAttribute(30, "name", "LearnStrat");
            builder.AddAttribute(31, "value", "AddConsensus");
            builder.AddAttribute(32, "checked", LearnStrat == "Consensus");
            builder.AddAttribute(33, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLearning("Consensus")));
            builder.CloseElement();
            builder.AddMarkupContent(34, "Consensus<br>\n                ");
            builder.OpenElement(35, "input");
            builder.AddAttribute(36, "type", "radio");
            builder.AddAttribute(37, "name", "LearnStrat");
            builder.AddAttribute(38, "value", "No Oblique");
            builder.AddAttribute(39, "checked", Oblique == false);
            builder.AddAttribute(40, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLearning("NoOblique")));
            builder.CloseElement();
            builder.AddMarkupContent(41, "No Oblique<br>\n                <br>\n                ");
            builder.OpenElement(42, "div");
            builder.AddAttribute(43, "class", "slidecontainer");
            builder.AddContent(44, " \n                    ");
            builder.AddMarkupContent(45, "<b>Consensus Tutors</b><br>\n                    ");
            builder.OpenElement(46, "input");
            builder.AddAttribute(47, "type", "range");
            builder.AddAttribute(48, "min", "2");
            builder.AddAttribute(49, "max", "12");
            builder.AddAttribute(50, "step", "1");
            builder.AddAttribute(51, "class", "slider");
            builder.AddAttribute(52, "disabled", ConTutDisabled);
            builder.AddAttribute(53, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(NoTut));
            builder.AddAttribute(54, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => NoTut = __value, NoTut));
            builder.CloseElement();
            builder.AddContent(55, " ");
            builder.AddContent(56, NoTut);
            builder.AddContent(57, "        \n                ");
            builder.CloseElement();
            builder.AddMarkupContent(58, " <br> \n            ");
            builder.CloseElement();
            builder.AddContent(59, "\n        ");
            builder.CloseElement();
            builder.AddContent(60, "\n        ");
            builder.OpenElement(61, "div");
            builder.AddAttribute(62, "class", "container");
            builder.AddContent(63, "\n            ");
            builder.OpenElement(64, "div");
            builder.AddAttribute(65, "class", "container");
            builder.AddContent(66, "\n                ");
            builder.OpenElement(67, "div");
            builder.AddAttribute(68, "style", "float:left; width:200px;");
            builder.AddContent(69, "\n                    ");
            builder.AddMarkupContent(70, "<b>Breeding Scope</b><br>\n                    ");
            builder.OpenElement(71, "input");
            builder.AddAttribute(72, "type", "radio");
            builder.AddAttribute(73, "name", "ScopeB");
            builder.AddAttribute(74, "value", "Global");
            builder.AddAttribute(75, "checked", ScopeB == false);
            builder.AddAttribute(76, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLocal(true, false)));
            builder.CloseElement();
            builder.AddMarkupContent(77, "Global<br>\n                    ");
            builder.OpenElement(78, "input");
            builder.AddAttribute(79, "type", "radio");
            builder.AddAttribute(80, "name", "ScopeB");
            builder.AddAttribute(81, "value", "Local");
            builder.AddAttribute(82, "checked", ScopeB == true);
            builder.AddAttribute(83, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLocal(true, true)));
            builder.CloseElement();
            builder.AddMarkupContent(84, "Local<br>\n                    <br>\n                    <br>\n                    <br>\n                    ");
            builder.OpenElement(85, "div");
            builder.AddAttribute(86, "class", "slidecontainer");
            builder.AddContent(87, " \n                        ");
            builder.AddMarkupContent(88, "<b>Local Steps</b><br>\n                        ");
            builder.OpenElement(89, "input");
            builder.AddAttribute(90, "type", "range");
            builder.AddAttribute(91, "min", "1");
            builder.AddAttribute(92, "max", "10");
            builder.AddAttribute(93, "step", "1");
            builder.AddAttribute(94, "class", "slider");
            builder.AddAttribute(95, "disabled", StepsDisabled);
            builder.AddAttribute(96, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(LSteps));
            builder.AddAttribute(97, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => LSteps = __value, LSteps));
            builder.CloseElement();
            builder.AddContent(98, " ");
            builder.AddContent(99, LSteps);
            builder.AddMarkupContent(100, " <br>       \n                    ");
            builder.CloseElement();
            builder.AddContent(101, " \n                ");
            builder.CloseElement();
            builder.AddContent(102, "\n                ");
            builder.OpenElement(103, "div");
            builder.AddAttribute(104, "style", "float:left;width:200px;");
            builder.AddContent(105, "\n                    ");
            builder.AddMarkupContent(106, "<b>Tutor Scope</b><br>\n                    ");
            builder.OpenElement(107, "input");
            builder.AddAttribute(108, "type", "radio");
            builder.AddAttribute(109, "name", "ScopeT");
            builder.AddAttribute(110, "value", "Global");
            builder.AddAttribute(111, "checked", ScopeT == false);
            builder.AddAttribute(112, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLocal(false, false)));
            builder.CloseElement();
            builder.AddMarkupContent(113, "Global<br>\n                    ");
            builder.OpenElement(114, "input");
            builder.AddAttribute(115, "type", "radio");
            builder.AddAttribute(116, "name", "ScopeT");
            builder.AddAttribute(117, "value", "Local");
            builder.AddAttribute(118, "checked", ScopeT == true);
            builder.AddAttribute(119, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => SetLocal(false, true)));
            builder.CloseElement();
            builder.AddMarkupContent(120, "Local<br>\n                ");
            builder.CloseElement();
            builder.AddContent(121, "\n            ");
            builder.CloseElement();
            builder.AddContent(122, "\n            ");
            builder.AddMarkupContent(123, "<div class=\"container\">\n                <div style=\"float:left;width:600px;\">\n                    <b>Warning:</b> generating local relationships lags parameter creation significantly!\n                </div>\n            </div>\n        ");
            builder.CloseElement();
            builder.AddContent(124, "  \n    ");
            builder.CloseElement();
            builder.AddMarkupContent(125, "\n    <div style=\"clear: both;\"></div>\n    <br><hr>\n\n    ");
            builder.AddMarkupContent(126, "<b>Preference</b>\n    ");
            builder.OpenElement(127, "div");
            builder.AddAttribute(128, "class", "slidecontainer");
            builder.AddContent(129, " \n        Template Matching (");
            builder.AddContent(130, Math());
            builder.AddContent(131, ")\n        ");
            builder.OpenElement(132, "input");
            builder.AddAttribute(133, "type", "range");
            builder.AddAttribute(134, "min", "0");
            builder.AddAttribute(135, "max", "1");
            builder.AddAttribute(136, "step", ".01");
            builder.AddAttribute(137, "class", "slider");
            builder.AddAttribute(138, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(RepPref));
            builder.AddAttribute(139, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => RepPref = __value, RepPref));
            builder.CloseElement();
            builder.AddContent(140, "\n        Larger Repertoire (");
            builder.AddContent(141, RepPref);
            builder.AddContent(142, ")\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(143, "\n    <br>\n    <hr>\n    ");
            builder.OpenElement(144, "div");
            builder.AddAttribute(145, "class", "container");
            builder.AddContent(146, "\n        ");
            builder.OpenElement(147, "div");
            builder.AddAttribute(148, "style", "float:left; width:250px;");
            builder.AddContent(149, "\n            ");
            builder.AddMarkupContent(150, "<b>Repertoire Size</b><br>\n            ");
            builder.OpenElement(151, "div");
            builder.AddAttribute(152, "class", "slidecontainer");
            builder.AddContent(153, " \n                ");
            builder.OpenElement(154, "input");
            builder.AddAttribute(155, "type", "range");
            builder.AddAttribute(156, "min", "1");
            builder.AddAttribute(157, "max", "40");
            builder.AddAttribute(158, "step", "1");
            builder.AddAttribute(159, "class", "slider");
            builder.AddAttribute(160, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(RepSize));
            builder.AddAttribute(161, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => RepSize = __value, RepSize));
            builder.CloseElement();
            builder.AddContent(162, RepSize);
            builder.AddContent(163, "\n            ");
            builder.CloseElement();
            builder.AddContent(164, "\n        ");
            builder.CloseElement();
            builder.AddContent(165, "\n        ");
            builder.OpenElement(166, "div");
            builder.AddAttribute(167, "style", "float:left; width:250px;");
            builder.AddContent(168, "\n            ");
            builder.AddMarkupContent(169, "<b>Repertoire Overhang</b><br>\n            ");
            builder.OpenElement(170, "div");
            builder.AddAttribute(171, "class", "slidecontainer");
            builder.AddContent(172, " \n                ");
            builder.OpenElement(173, "input");
            builder.AddAttribute(174, "type", "range");
            builder.AddAttribute(175, "min", "0");
            builder.AddAttribute(176, "max", "2");
            builder.AddAttribute(177, "step", ".01");
            builder.AddAttribute(178, "class", "slider");
            builder.AddAttribute(179, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(RepOH));
            builder.AddAttribute(180, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => RepOH = __value, RepOH));
            builder.CloseElement();
            builder.AddContent(181, RepOH);
            builder.AddContent(182, "\n            ");
            builder.CloseElement();
            builder.AddContent(183, "\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(184, "\n        <div style=\"clear: both;\"></div>\n        0\n        ");
            builder.OpenElement(185, "svg");
            builder.AddAttribute(186, "width", "500");
            builder.AddAttribute(187, "height", "30");
            builder.AddMarkupContent(188, "\n            <rect width=\"500\" height=\"30\" style=\"fill:rgb(210,210,210);\"></rect>\n            ");
            builder.OpenElement(189, "rect");
            builder.AddAttribute(190, "height", "30");
            builder.AddAttribute(191, "style", "fill:rgb(58,80,107);");
            builder.AddAttribute(192, "width", OH2());
            builder.CloseElement();
            builder.AddContent(193, "\n            ");
            builder.OpenElement(194, "rect");
            builder.AddAttribute(195, "height", "30");
            builder.AddAttribute(196, "style", "fill:rgb(108,145,194);");
            builder.AddAttribute(197, "width", OH1());
            builder.CloseElement();
            builder.AddContent(198, "\n            ");
            builder.OpenElement(199, "rect");
            builder.AddAttribute(200, "height", "30");
            builder.AddAttribute(201, "style", "fill:rgb(0,0,0);");
            builder.AddAttribute(202, "width", RepSize);
            builder.CloseElement();
            builder.AddContent(203, "\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(204, "\n        500\n        <br>\n        ");
            builder.AddMarkupContent(205, @"<div style=""float:left; width:30px;"">
        <svg width=""50"" height=""90"">
            <rect y=""4"" width=""20"" height=""20"" style=""fill:rgb(0,0,0);""></rect>
            <rect y=""26"" width=""20"" height=""20"" style=""fill:rgb(108,145,194);""></rect>
            <rect y=""48"" width=""20"" height=""20"" style=""fill:rgb(58,80,107);""></rect>              
            <rect y=""70"" width=""20"" height=""20"" style=""fill:rgb(210,210,210);""></rect>
        </svg>
        </div>
        ");
            builder.AddMarkupContent(206, "<div style=\"float:left; width:250px;\">\n            90% chance to know <br>\n            10% chance to know <br>\n            1% chance to know <br>\n            0% chance to know <br>\n        </div>\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(207, "\n    <div style=\"clear: both;\"></div>\n    <hr>\n\n    ");
            builder.OpenElement(208, "div");
            builder.AddAttribute(209, "class", "container");
            builder.AddContent(210, "\n        ");
            builder.OpenElement(211, "div");
            builder.AddAttribute(212, "style", "float:left; width:250px;");
            builder.AddContent(213, "\n            ");
            builder.AddMarkupContent(214, "<b>Accuracy</b>\n            ");
            builder.OpenElement(215, "div");
            builder.AddAttribute(216, "class", "slidecontainer");
            builder.AddContent(217, " \n                ");
            builder.AddMarkupContent(218, "<label>Initial</label>\n                ");
            builder.OpenElement(219, "input");
            builder.AddAttribute(220, "type", "range");
            builder.AddAttribute(221, "min", "0");
            builder.AddAttribute(222, "max", "1");
            builder.AddAttribute(223, "step", ".01");
            builder.AddAttribute(224, "class", "slider");
            builder.AddAttribute(225, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(initACC));
            builder.AddAttribute(226, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => initACC = __value, initACC));
            builder.CloseElement();
            builder.AddContent(227, " ");
            builder.AddContent(228, initACC);
            builder.AddMarkupContent(229, "        \n                <br>\n                ");
            builder.AddMarkupContent(230, "<label>Noise</label> \n                ");
            builder.OpenElement(231, "input");
            builder.AddAttribute(232, "type", "range");
            builder.AddAttribute(233, "min", "0");
            builder.AddAttribute(234, "max", ".5");
            builder.AddAttribute(235, "step", ".01");
            builder.AddAttribute(236, "class", "slider");
            builder.AddAttribute(237, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(NoiseACC));
            builder.AddAttribute(238, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => NoiseACC = __value, NoiseACC));
            builder.CloseElement();
            builder.AddContent(239, " ");
            builder.AddContent(240, NoiseACC);
            builder.AddContent(241, "    \n            ");
            builder.CloseElement();
            builder.AddContent(242, "\n        ");
            builder.CloseElement();
            builder.AddContent(243, "\n        ");
            builder.OpenElement(244, "div");
            builder.AddContent(245, "\n            ");
            builder.AddMarkupContent(246, "<b>Learning Threshold</b>\n            ");
            builder.OpenElement(247, "div");
            builder.AddAttribute(248, "class", "slidecontainer");
            builder.AddContent(249, " \n                ");
            builder.AddMarkupContent(250, "<label>Initial</label>\n                ");
            builder.OpenElement(251, "input");
            builder.AddAttribute(252, "type", "range");
            builder.AddAttribute(253, "min", "0");
            builder.AddAttribute(254, "max", MaxAge);
            builder.AddAttribute(255, "step", ".25");
            builder.AddAttribute(256, "class", "slider");
            builder.AddAttribute(257, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(initLTH));
            builder.AddAttribute(258, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => initLTH = __value, initLTH));
            builder.CloseElement();
            builder.AddContent(259, " ");
            builder.AddContent(260, initLTH);
            builder.AddMarkupContent(261, "        \n                <br>\n                ");
            builder.AddMarkupContent(262, "<label>Noise</label> \n                ");
            builder.OpenElement(263, "input");
            builder.AddAttribute(264, "type", "range");
            builder.AddAttribute(265, "min", "0");
            builder.AddAttribute(266, "max", "10");
            builder.AddAttribute(267, "step", ".25");
            builder.AddAttribute(268, "class", "slider");
            builder.AddAttribute(269, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(NoiseLTH));
            builder.AddAttribute(270, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => NoiseLTH = __value, NoiseLTH));
            builder.CloseElement();
            builder.AddContent(271, " ");
            builder.AddContent(272, NoiseLTH);
            builder.AddContent(273, "    \n            ");
            builder.CloseElement();
            builder.AddContent(274, "\n        ");
            builder.CloseElement();
            builder.AddContent(275, "\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(276, "\n    <div style=\"clear: both;\"></div>\n    <br>\n    ");
            builder.OpenElement(277, "div");
            builder.AddAttribute(278, "class", "container");
            builder.AddContent(279, "\n        ");
            builder.OpenElement(280, "div");
            builder.AddAttribute(281, "style", "float:left; width:250px;");
            builder.AddContent(282, "\n            ");
            builder.AddMarkupContent(283, "<b>Chance to Forget</b>\n            ");
            builder.OpenElement(284, "div");
            builder.AddAttribute(285, "class", "slidecontainer");
            builder.AddContent(286, " \n                ");
            builder.AddMarkupContent(287, "<label>Initial</label>\n                ");
            builder.OpenElement(288, "input");
            builder.AddAttribute(289, "type", "range");
            builder.AddAttribute(290, "min", "0");
            builder.AddAttribute(291, "max", "1");
            builder.AddAttribute(292, "step", ".01");
            builder.AddAttribute(293, "class", "slider");
            builder.AddAttribute(294, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(initCTF));
            builder.AddAttribute(295, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => initCTF = __value, initCTF));
            builder.CloseElement();
            builder.AddContent(296, " ");
            builder.AddContent(297, initCTF);
            builder.AddMarkupContent(298, "        \n                <br>\n                ");
            builder.AddMarkupContent(299, "<label>Noise</label> \n                ");
            builder.OpenElement(300, "input");
            builder.AddAttribute(301, "type", "range");
            builder.AddAttribute(302, "min", "0");
            builder.AddAttribute(303, "max", ".5");
            builder.AddAttribute(304, "step", ".01");
            builder.AddAttribute(305, "class", "slider");
            builder.AddAttribute(306, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(NoiseCTF));
            builder.AddAttribute(307, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => NoiseCTF = __value, NoiseCTF));
            builder.CloseElement();
            builder.AddContent(308, " ");
            builder.AddContent(309, NoiseCTF);
            builder.AddContent(310, "    \n            ");
            builder.CloseElement();
            builder.AddContent(311, "\n        ");
            builder.CloseElement();
            builder.AddContent(312, "\n        ");
            builder.OpenElement(313, "div");
            builder.AddContent(314, "\n            ");
            builder.AddMarkupContent(315, "<b>Chance to Invent</b>\n            ");
            builder.OpenElement(316, "div");
            builder.AddAttribute(317, "class", "slidecontainer");
            builder.AddContent(318, " \n                ");
            builder.AddMarkupContent(319, "<label>Initial</label>\n                ");
            builder.OpenElement(320, "input");
            builder.AddAttribute(321, "type", "range");
            builder.AddAttribute(322, "min", "0");
            builder.AddAttribute(323, "max", "1");
            builder.AddAttribute(324, "step", ".01");
            builder.AddAttribute(325, "class", "slider");
            builder.AddAttribute(326, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(initCTI));
            builder.AddAttribute(327, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => initCTI = __value, initCTI));
            builder.CloseElement();
            builder.AddContent(328, " ");
            builder.AddContent(329, initCTI);
            builder.AddMarkupContent(330, "        \n                <br>\n                ");
            builder.AddMarkupContent(331, "<label>Noise</label> \n                ");
            builder.OpenElement(332, "input");
            builder.AddAttribute(333, "type", "range");
            builder.AddAttribute(334, "min", "0");
            builder.AddAttribute(335, "max", ".5");
            builder.AddAttribute(336, "step", ".01");
            builder.AddAttribute(337, "class", "slider");
            builder.AddAttribute(338, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(NoiseCTI));
            builder.AddAttribute(339, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => NoiseCTI = __value, NoiseCTI));
            builder.CloseElement();
            builder.AddContent(340, " ");
            builder.AddContent(341, NoiseCTI);
            builder.AddContent(342, "    \n            ");
            builder.CloseElement();
            builder.AddContent(343, "\n        ");
            builder.CloseElement();
            builder.AddContent(344, "\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(345, "\n    <hr>\n    <div style=\"clear: both;\"></div>\n    ");
            builder.OpenElement(346, "div");
            builder.AddAttribute(347, "class", "container");
            builder.AddContent(348, "\n        ");
            builder.OpenElement(349, "div");
            builder.AddAttribute(350, "style", "float:left; width:250px;");
            builder.AddContent(351, "\n            ");
            builder.AddMarkupContent(352, "<b>Learning Penalty</b><br>\n            ");
            builder.OpenElement(353, "div");
            builder.AddAttribute(354, "class", "slidecontainer");
            builder.AddContent(355, " \n                ");
            builder.OpenElement(356, "input");
            builder.AddAttribute(357, "type", "range");
            builder.AddAttribute(358, "min", "0");
            builder.AddAttribute(359, "max", "5");
            builder.AddAttribute(360, "step", ".01");
            builder.AddAttribute(361, "class", "slider");
            builder.AddAttribute(362, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(LPen));
            builder.AddAttribute(363, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => LPen = __value, LPen));
            builder.CloseElement();
            builder.AddContent(364, LPen);
            builder.AddContent(365, "\n            ");
            builder.CloseElement();
            builder.AddContent(366, "\n        ");
            builder.CloseElement();
            builder.AddContent(367, "\n        ");
            builder.OpenElement(368, "div");
            builder.AddAttribute(369, "style", "float:left; width:250px;");
            builder.AddContent(370, "\n            ");
            builder.AddMarkupContent(371, "<b>Chick Survival</b><br>\n            ");
            builder.OpenElement(372, "div");
            builder.AddAttribute(373, "class", "slidecontainer");
            builder.AddContent(374, " \n                ");
            builder.OpenElement(375, "input");
            builder.AddAttribute(376, "type", "range");
            builder.AddAttribute(377, "min", ".1");
            builder.AddAttribute(378, "max", ".9");
            builder.AddAttribute(379, "step", ".01");
            builder.AddAttribute(380, "class", "slider");
            builder.AddAttribute(381, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(Chick));
            builder.AddAttribute(382, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => Chick = __value, Chick));
            builder.CloseElement();
            builder.AddContent(383, Chick);
            builder.AddContent(384, "\n            ");
            builder.CloseElement();
            builder.AddContent(385, "\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(386, "\n        <div style=\"clear: both;\"></div>\n        ");
            builder.OpenElement(387, "div");
            builder.AddAttribute(388, "style", "float:left; width:250px;");
            builder.AddContent(389, "\n            ");
            builder.AddMarkupContent(390, "<b>Encounter Success</b><br>\n            ");
            builder.OpenElement(391, "div");
            builder.AddAttribute(392, "class", "slidecontainer");
            builder.AddContent(393, " \n                ");
            builder.OpenElement(394, "input");
            builder.AddAttribute(395, "type", "range");
            builder.AddAttribute(396, "min", "0");
            builder.AddAttribute(397, "max", "1");
            builder.AddAttribute(398, "step", ".01");
            builder.AddAttribute(399, "class", "slider");
            builder.AddAttribute(400, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(EnSuc));
            builder.AddAttribute(401, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => EnSuc = __value, EnSuc));
            builder.CloseElement();
            builder.AddContent(402, EnSuc);
            builder.AddContent(403, "\n            ");
            builder.CloseElement();
            builder.AddContent(404, "\n        ");
            builder.CloseElement();
            builder.AddContent(405, "\n        ");
            builder.OpenElement(406, "div");
            builder.AddAttribute(407, "style", "float:left; width:250px;");
            builder.AddContent(408, "\n            ");
            builder.AddMarkupContent(409, "<b>Maximum Age</b><br>\n            ");
            builder.OpenElement(410, "div");
            builder.AddAttribute(411, "class", "slidecontainer");
            builder.AddContent(412, " \n                ");
            builder.OpenElement(413, "input");
            builder.AddAttribute(414, "type", "range");
            builder.AddAttribute(415, "min", "5");
            builder.AddAttribute(416, "max", "35");
            builder.AddAttribute(417, "step", "1");
            builder.AddAttribute(418, "class", "slider");
            builder.AddAttribute(419, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(MaxAge));
            builder.AddAttribute(420, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => MaxAge = __value, MaxAge));
            builder.CloseElement();
            builder.AddContent(421, MaxAge);
            builder.AddContent(422, "\n            ");
            builder.CloseElement();
            builder.AddContent(423, "\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(424, "\n        <div style=\"clear: both;\"></div>\n        <br>\n        ");
            builder.OpenElement(425, "div");
            builder.AddContent(426, "\n            ");
            builder.AddMarkupContent(427, "<b>Listening Threshold</b>\n            ");
            builder.OpenElement(428, "div");
            builder.AddAttribute(429, "class", "slidecontainer");
            builder.AddContent(430, " \n                ");
            builder.AddMarkupContent(431, "<label>Number of Syllabless</label>\n                ");
            builder.OpenElement(432, "input");
            builder.AddAttribute(433, "type", "range");
            builder.AddAttribute(434, "min", "1");
            builder.AddAttribute(435, "max", "7");
            builder.AddAttribute(436, "step", "1");
            builder.AddAttribute(437, "class", "slider");
            builder.AddAttribute(438, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(LisThrsh));
            builder.AddAttribute(439, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => LisThrsh = __value, LisThrsh));
            builder.CloseElement();
            builder.AddContent(440, " ");
            builder.AddContent(441, LisThrsh);
            builder.AddMarkupContent(442, "        \n                <br>\n                Or\n                <br>\n                ");
            builder.AddMarkupContent(443, "<label>Percentage of Repertoire</label> \n                ");
            builder.OpenElement(444, "input");
            builder.AddAttribute(445, "type", "range");
            builder.AddAttribute(446, "min", "0");
            builder.AddAttribute(447, "max", ".999");
            builder.AddAttribute(448, "step", ".01");
            builder.AddAttribute(449, "class", "slider");
            builder.AddAttribute(450, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(LisThrsh));
            builder.AddAttribute(451, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => LisThrsh = __value, LisThrsh));
            builder.CloseElement();
            builder.AddContent(452, " ");
            builder.AddContent(453, LisThrsh);
            builder.AddContent(454, "    \n            ");
            builder.CloseElement();
            builder.AddContent(455, "\n        ");
            builder.CloseElement();
            builder.AddContent(456, "\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(457, "\n    <hr>\n    <div style=\"clear: both;\"></div>\n\n\n    ");
            builder.OpenElement(458, "div");
            builder.AddAttribute(459, "class", "container");
            builder.AddAttribute(460, "style", "height=680px");
            builder.AddContent(461, "\n        ");
            builder.OpenElement(462, "div");
            builder.AddAttribute(463, "style", "float:left;width:250px;height:500px");
            builder.AddMarkupContent(464, "\n            <img src=\"/Images/Chicka1.png\">\n            <br>\n            ");
            builder.OpenElement(465, "button");
            builder.AddAttribute(466, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(SetParam));
            builder.AddContent(467, "Set Parameters");
            builder.CloseElement();
            builder.AddContent(468, "\n            ");
            builder.AddContent(469, ParStatus);
            builder.AddMarkupContent(470, "\n            <br>\n            ");
            builder.OpenElement(471, "button");
            builder.AddAttribute(472, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(RunSimulation));
            builder.AddAttribute(473, "disabled", NotReady);
            builder.AddContent(474, "Run Sim");
            builder.CloseElement();
            builder.AddContent(475, "\n            ");
            builder.AddContent(476, Status);
            builder.AddMarkupContent(477, "\n            <br>\n            Current Step: ");
            builder.AddContent(478, CurrentStep);
            builder.AddMarkupContent(479, "\n            <br>\n            <br>\n            ");
            builder.AddMarkupContent(480, "<label>SimStep Increment:</label>\n            ");
            builder.OpenElement(481, "input");
            builder.AddAttribute(482, "value", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(Incre));
            builder.AddAttribute(483, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => Incre = __value, Incre));
            builder.CloseElement();
            builder.AddContent(484, "\n            ");
            builder.AddMarkupContent(485, "<svg width=\"250\" height=\"1\">\n                <rect width=\"250\" height=\"1\" style=\"fill:rgb(0,0,0);\"></rect>\n            </svg>\n            ");
            builder.AddMarkupContent(486, "<b>Average Rep:</b> ");
            builder.AddContent(487, AverageRep);
            builder.AddMarkupContent(488, "<br>\n            ");
            builder.AddMarkupContent(489, "<b>Average Match:</b> ");
            builder.AddContent(490, AverageMatch);
            builder.AddMarkupContent(491, "<br>\n            ");
            builder.AddMarkupContent(492, "<b>Average Acc:</b> ");
            builder.AddContent(493, AverageAcc);
            builder.AddMarkupContent(494, "<br>\n            ");
            builder.AddMarkupContent(495, "<b>Average LrnTh:</b> ");
            builder.AddContent(496, AverageLrnTh);
            builder.AddMarkupContent(497, "<br>\n            ");
            builder.AddMarkupContent(498, "<b>Average CtI:</b> ");
            builder.AddContent(499, AverageCtI);
            builder.AddMarkupContent(500, "<br>\n            ");
            builder.AddMarkupContent(501, "<b>Average CtF:</b> ");
            builder.AddContent(502, AverageCtF);
            builder.AddMarkupContent(503, "<br>\n        ");
            builder.CloseElement();
            builder.AddContent(504, "\n        ");
            builder.OpenElement(505, "div");
            builder.AddAttribute(506, "style", "float:left;width:602px;height:700px;");
            builder.AddContent(507, "\n            ");
            builder.OpenElement(508, "div");
            builder.AddAttribute(509, "style", "width:602px;height:37px;");
            builder.AddContent(510, "\n                ");
            builder.OpenElement(511, "input");
            builder.AddAttribute(512, "type", "radio");
            builder.AddAttribute(513, "name", "ColorPlot");
            builder.AddAttribute(514, "value", "SyllableRep");
            builder.AddAttribute(515, "checked", TableCol == 1);
            builder.AddAttribute(516, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => QuickSwitch(1)));
            builder.AddAttribute(517, "disabled", NotReady);
            builder.CloseElement();
            builder.AddContent(518, "Syllable Rep  \n                ");
            builder.OpenElement(519, "input");
            builder.AddAttribute(520, "type", "radio");
            builder.AddAttribute(521, "name", "ColorPlot");
            builder.AddAttribute(522, "value", "Match");
            builder.AddAttribute(523, "checked", TableCol == 2);
            builder.AddAttribute(524, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => QuickSwitch(2)));
            builder.AddAttribute(525, "disabled", NotReady);
            builder.CloseElement();
            builder.AddContent(526, "Match  \n                ");
            builder.OpenElement(527, "input");
            builder.AddAttribute(528, "type", "radio");
            builder.AddAttribute(529, "name", "ColorPlot");
            builder.AddAttribute(530, "value", "Accuracy");
            builder.AddAttribute(531, "checked", TableCol == 3);
            builder.AddAttribute(532, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => QuickSwitch(3)));
            builder.AddAttribute(533, "disabled", NotReady);
            builder.CloseElement();
            builder.AddContent(534, "Accuracy  \n                ");
            builder.OpenElement(535, "input");
            builder.AddAttribute(536, "type", "radio");
            builder.AddAttribute(537, "name", "ColorPlot");
            builder.AddAttribute(538, "value", "LrnThresh");
            builder.AddAttribute(539, "checked", TableCol == 4);
            builder.AddAttribute(540, "onchange", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIChangeEventArgs>(() => QuickSwitch(4)));
            builder.AddAttribute(541, "disabled", NotReady);
            builder.CloseElement();
            builder.AddMarkupContent(542, "Learning Threshold<br>\n            ");
            builder.CloseElement();
            builder.AddContent(543, "\n            ");
            builder.AddMarkupContent(544, "<div style=\"width:602px;height:602px;border: 1px solid black\">\n                <table id=\"BirdMatrix\">\n                    <tr><td>Not Yet Initialized!</td></tr>\n                </table>\n            </div>\n        ");
            builder.CloseElement();
            builder.AddContent(545, "\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(546, "\n    <div style=\"clear: both;\"></div>\n    <br><hr>\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 239 "D:\Documents\C#\SEMWebApp\Pages\SEM.cshtml"
            

    float test1;
    float test2;
    float test3;
    float test4;
    double test5;
    string test6;

    string ParStatus="Parameter-0";
    int ParCount=1;
    int TableCol =1;
    bool ConTutDisabled=true;
    bool StepsDisabled=true;
    bool NotReady=true;

    bool ScopeB=false;
    bool ScopeT=false;
    int MaxAge =20;
    int RepSize=5;
    int NoTut=8;
    int LSteps=1;
    double LisThrsh=7;
    double EnSuc=.95;
    double Chick=.3;
    double LPen=.75;
    double RepOH=.25;
    double initACC=.7;
    double NoiseACC=.15;
    double initLTH=2;
    double NoiseLTH=.25;
    double initCTI=.1;
    double NoiseCTI=0;
    double initCTF=.2;
    double NoiseCTF=0;
    double RepPref=1;
    string LearnStrat="Add";
    bool Oblique = true;

    Nullable<float> AverageRep=null;
    Nullable<float> AverageAcc=null;
    Nullable<float> AverageLrnTh=null;
    Nullable<float> AverageMatch=null;
    Nullable<float> AverageCtI=null;
    Nullable<float> AverageCtF=null;

    SimParams Par=new SimParams();
    Population Pop;
    int Incre=10;
    int CurrentStep=0;
    string Status="Not Active";

    double Math(){
        return(1-RepPref);
    }
    int OH1(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH));
    }
    int OH2(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH)*2);
    }
    void SetLearning(string value){
        if(value == "NoOblique"){
            Oblique = false;
            ConTutDisabled=true;
        }else{
        LearnStrat=value;
        Oblique = true;
        if(value == "Consensus"){
            ConTutDisabled=false;
        }else{
            ConTutDisabled=true;
        }

        }
    }

    void SetLocal(bool breed, bool value){
        if(breed){
            ScopeB=value;
        }else{
            ScopeT=value;
        }
        if(ScopeT == true || ScopeB == true){
            StepsDisabled=false;
        }else{
            StepsDisabled=true;
        }
    }
    

    async void SetParam(){
        ParStatus="Generating!";
        await Task.Run(StateHasChanged);
        if(initLTH > MaxAge){
            initLTH = MaxAge;
        }
        Par=new SimParams(maxAge:MaxAge, localBreeding:ScopeB, localTutor:ScopeT,
        initialSyllableRepertoireSize:RepSize,numTutorConsensusStrategy:NoTut,
        steps:LSteps,listeningThreshold:(float)LisThrsh,encounterSuccess:(float)EnSuc,
        chickSurvival:(float)Chick,learningPenalty:(float)LPen,
        percentSyllableOverhang:(float)RepOH,initialAccuracy:(float)initACC,
        inheritedAccuracyNoise:(float)NoiseACC,
        initialLearningThreshold:(float)initLTH,
        inheritedLearningThresholdNoise:(float)NoiseLTH,
        initialChancetoInvent:(float)initCTI,
        inheritedChancetoInventNoise:(float)NoiseCTI,
        initialChancetoForget:(float)initCTF, learningStrategy:LearnStrat,
        inheritedChancetoForgetNoise:(float)NoiseCTF, obliqueLearning:Oblique,
        matchPreference:(float)Math(),repertoireSizePreference:(float)RepPref);
        Pop=new Population(Par);
        AssignAves();
        ParCount+=1;
        CurrentStep=0;
        NotReady=false;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
        ParStatus=string.Format("Parameters-{0}",ParCount);
        StateHasChanged();
    }
    async void RunSimulation(){
        Status="Active";
        await Task.Run(StateHasChanged);
        Pop=Simulations.WebSim(Par,Pop,Incre);
        CurrentStep+=Incre;
        Status="Not Active";
        AssignAves();
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
        StateHasChanged();
    } 
    void AssignAves(){
        this.AverageRep=(float)Pop.SyllableRepertoire.Average();
        this.AverageAcc=(float)Pop.Accuracy.Average();
        this.AverageLrnTh=(float)Pop.LearningThreshold.Average();
        this.AverageMatch=(float)Pop.Match.Average();
        this.AverageCtI=(float)Pop.ChanceInvent.Average();
        this.AverageCtF=(float)Pop.ChanceForget.Average();
    }

    string[] SetColors(int color, Population Pop){
        float[] VarNeeded;
        float MAX;
        float MIN;
        float BinSize;
        int Converted;
        string[] FinalColor;
        if(color == 1){
            VarNeeded = Array.ConvertAll(Pop.SyllableRepertoire, x => (float)x);
        }else if(color == 2){
            VarNeeded = Pop.Match;
        }else if(color==3){
            VarNeeded = Pop.Accuracy;
        }else{
            VarNeeded = Pop.LearningThreshold;
        }
        MAX=VarNeeded.Max();
        MIN=VarNeeded.Min();
        BinSize=(MAX-MIN)/15;
        
        FinalColor = new string[VarNeeded.Length];
        for(int i=0;i<VarNeeded.Length;i++){
            Converted = 255-(int)((((int)((VarNeeded[i]-MIN)/BinSize))/15f)*255);
            test5=(int)((((int)((VarNeeded[i]-MIN)/BinSize))/15f)*255);
            FinalColor[i] = string.Format("rgb({0},{1},{2})", 255,Converted,Converted);
        }
        //string[] lol =  new string[400];
        //for(int i=0;i<400;i++){
        //    lol[i] = "yellow";
        //}
        test1=VarNeeded[399];
        test2=MAX;
        test3=MIN;
        test4=BinSize;
        test6=FinalColor[399];
        return(FinalColor);
    }
    async void QuickSwitch(int type){
        this.TableCol = type;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
