#pragma checksum "D:\Documents\C#\SEMWebApp\Pages\SEM.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8976f2792fd9c4fbb1f0475cd2eed0a96738fa14"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SEMWebApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using SEMWebApp;
    using SEMWebApp.Shared;
    using SEMStandard;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/SEM")]
    public class SEM : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 239 "D:\Documents\C#\SEMWebApp\Pages\SEM.cshtml"
            

    float test1;
    float test2;
    float test3;
    float test4;
    double test5;
    string test6;

    string ParStatus="Parameter-0";
    int ParCount=1;
    int TableCol =1;
    bool ConTutDisabled=true;
    bool StepsDisabled=true;
    bool NotReady=true;

    bool ScopeB=false;
    bool ScopeT=false;
    int MaxAge =20;
    int RepSize=5;
    int NoTut=8;
    int LSteps=1;
    double LisThrsh=7;
    double EnSuc=.95;
    double Chick=.3;
    double LPen=.75;
    double RepOH=.25;
    double initACC=.7;
    double NoiseACC=.15;
    double initLTH=2;
    double NoiseLTH=.25;
    double initCTI=.1;
    double NoiseCTI=0;
    double initCTF=.2;
    double NoiseCTF=0;
    double RepPref=1;
    string LearnStrat="Add";
    bool Oblique = true;

    Nullable<float> AverageRep=null;
    Nullable<float> AverageAcc=null;
    Nullable<float> AverageLrnTh=null;
    Nullable<float> AverageMatch=null;
    Nullable<float> AverageCtI=null;
    Nullable<float> AverageCtF=null;

    SimParams Par=new SimParams();
    Population Pop;
    int Incre=10;
    int CurrentStep=0;
    string Status="Not Active";

    double Math(){
        return(1-RepPref);
    }
    int OH1(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH));
    }
    int OH2(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH)*2);
    }
    void SetLearning(string value){
        if(value == "NoOblique"){
            Oblique = false;
            ConTutDisabled=true;
        }else{
        LearnStrat=value;
        Oblique = true;
        if(value == "Consensus"){
            ConTutDisabled=false;
        }else{
            ConTutDisabled=true;
        }

        }
    }

    void SetLocal(bool breed, bool value){
        if(breed){
            ScopeB=value;
        }else{
            ScopeT=value;
        }
        if(ScopeT == true || ScopeB == true){
            StepsDisabled=false;
        }else{
            StepsDisabled=true;
        }
    }
    

    async void SetParam(){
        ParStatus="Generating!";
        await Task.Run(StateHasChanged);
        if(initLTH > MaxAge){
            initLTH = MaxAge;
        }
        Par=new SimParams(maxAge:MaxAge, localBreeding:ScopeB, localTutor:ScopeT,
        initialSyllableRepertoireSize:RepSize,numTutorConsensusStrategy:NoTut,
        steps:LSteps,listeningThreshold:(float)LisThrsh,encounterSuccess:(float)EnSuc,
        chickSurvival:(float)Chick,learningPenalty:(float)LPen,
        percentSyllableOverhang:(float)RepOH,initialAccuracy:(float)initACC,
        inheritedAccuracyNoise:(float)NoiseACC,
        initialLearningThreshold:(float)initLTH,
        inheritedLearningThresholdNoise:(float)NoiseLTH,
        initialChancetoInvent:(float)initCTI,
        inheritedChancetoInventNoise:(float)NoiseCTI,
        initialChancetoForget:(float)initCTF, learningStrategy:LearnStrat,
        inheritedChancetoForgetNoise:(float)NoiseCTF, obliqueLearning:Oblique,
        matchPreference:(float)Math(),repertoireSizePreference:(float)RepPref);
        Pop=new Population(Par);
        AssignAves();
        ParCount+=1;
        CurrentStep=0;
        NotReady=false;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
        ParStatus=string.Format("Parameters-{0}",ParCount);
        StateHasChanged();
    }
    async void RunSimulation(){
        Status="Active";
        await Task.Run(StateHasChanged);
        Pop=Simulations.WebSim(Par,Pop,Incre);
        CurrentStep+=Incre;
        Status="Not Active";
        AssignAves();
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
        StateHasChanged();
    } 
    void AssignAves(){
        this.AverageRep=(float)Pop.SyllableRepertoire.Average();
        this.AverageAcc=(float)Pop.Accuracy.Average();
        this.AverageLrnTh=(float)Pop.LearningThreshold.Average();
        this.AverageMatch=(float)Pop.Match.Average();
        this.AverageCtI=(float)Pop.ChanceInvent.Average();
        this.AverageCtF=(float)Pop.ChanceForget.Average();
    }

    string[] SetColors(int color, Population Pop){
        float[] VarNeeded;
        float MAX;
        float MIN;
        float BinSize;
        int Converted;
        string[] FinalColor;
        if(color == 1){
            VarNeeded = Array.ConvertAll(Pop.SyllableRepertoire, x => (float)x);
        }else if(color == 2){
            VarNeeded = Pop.Match;
        }else if(color==3){
            VarNeeded = Pop.Accuracy;
        }else{
            VarNeeded = Pop.LearningThreshold;
        }
        MAX=VarNeeded.Max();
        MIN=VarNeeded.Min();
        BinSize=(MAX-MIN)/15;
        
        FinalColor = new string[VarNeeded.Length];
        for(int i=0;i<VarNeeded.Length;i++){
            Converted = 255-(int)((((int)((VarNeeded[i]-MIN)/BinSize))/15f)*255);
            test5=(int)((((int)((VarNeeded[i]-MIN)/BinSize))/15f)*255);
            FinalColor[i] = string.Format("rgb({0},{1},{2})", 255,Converted,Converted);
        }
        //string[] lol =  new string[400];
        //for(int i=0;i<400;i++){
        //    lol[i] = "yellow";
        //}
        test1=VarNeeded[399];
        test2=MAX;
        test3=MIN;
        test4=BinSize;
        test6=FinalColor[399];
        return(FinalColor);
    }
    async void QuickSwitch(int type){
        this.TableCol = type;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
