@page "/SEM"
@using SEMStandard;


<div style="width:900px">
    
    <h1><img src="/Images/prettymocker.png" height="130"/>Song Evolution Model</h1>
    <hr>
    <h5><b><u>Behavior and Repertoire:</u></b></h5>
    <br/>
    <div class='container'>
        <div class='container' style="padding: 0">
            <div style="float:left;width:250px;">
                <b>Learning Strategy</b> <span title="The method birds use when learning obliquely.">&#128712;</span><br/>
                <input type = "radio" name="LearnStrat" value="Add" checked="@(LearnStrat == "Add")" onchange="@(() => SetLearning("Add"))" /> Add<br/>
                <input type = "radio" name="LearnStrat" value="AddForget" checked="@(LearnStrat == "AddForget")" onchange="@(() => SetLearning("AddForget"))" /> AddForget<br/>
                <input type = "radio" name="LearnStrat" value="AddConsensus" checked="@(LearnStrat == "Consensus")" onchange="@(() => SetLearning("Consensus"))" /> Consensus<br/>
                <input type = "radio" name="LearnStrat" value="No Oblique" checked="@(Oblique == false)" onchange="@(() => SetLearning("NoOblique"))" /> No Oblique<br/>
                <br/>
                <span style="color:@ConsenColor"><b>Consensus Tutors</b></span>
                <div class="slidecontainer" style="width:250px;"> 
                    <input bind="@NoTut" type="range" min="2" max="12" step="1" class="slider" disabled="@ConTutDisabled"/>
                    <span style="color:@ConsenColor">@NoTut</span>      
                </div>
            </div>
        </div> 
    </div>   

    <div class='container'>
        <div style="float:left; width:250px;">
            <b>Syllable Repertoire Size</b> <span title="The number of syllables birds have a 90% chance to know on initialization.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@RepSize" type="range" min="1" max="40" step="1" class="slider" />@RepSize
            </div>
        </div>

        <div style="float:left; width:250px;">
            <b>Repertoire Overflow</b> <span title="This multiplied by Repertoire Size is the number of syllables birds have a 10% and 1% chance to know on initialization.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@RepOH" type="range" min="0" max="2" step=".01" class="slider" />@RepOH
            </div>
        </div>
        <br/><br/>

        
        <span></span><br/>
        <b>Syllable Space</b><br/>
        0
        <svg width="500" height="30" float="left">
            <rect width="500" height="30" style="fill:rgb(210,210,210);" />
            <rect width="@OH2()" height="30" style="fill:rgb(58,80,107);"/>
            <rect width="@OH1()" height="30" style="fill:rgb(108,145,194);" />
            <rect width="@RepSize" height="30" style="fill:rgb(0,0,0);"/>
            <rect id="ticks" x="50" y="20" height="10" width="1.5" style="fill:rgb(0,0,0);" />
            <use xlink:href="#ticks" x="50"/>
            <use xlink:href="#ticks" x="100"/><use xlink:href="#ticks" x="150"/>
            <use xlink:href="#ticks" x="200"/><use xlink:href="#ticks" x="250"/>
            <use xlink:href="#ticks" x="300"/><use xlink:href="#ticks" x="350"/>
            <use xlink:href="#ticks" x="400"/><use xlink:href="#ticks" x="450"/>
        </svg>
        500
        <br/>

        <div style="float:left; width:30px;">
            <svg width="50" height="90">
                <rect y="4" width="20" height="20" style="fill:rgb(0,0,0);" />
                <rect y="26" width="20" height="20" style="fill:rgb(108,145,194);" />
                <rect y="48" width="20" height="20" style="fill:rgb(58,80,107);" />              
                <rect y="70" width="20" height="20" style="fill:rgb(210,210,210);" />
            </svg>
        </div>
        <div style="float:left; width:250px;">
            90% chance to know <br/>
            10% chance to know <br/>
            1% chance to know <br/>
            0% chance to know <br/>
        </div>
    </div>

    <div style="clear: both;"></div>
    <div class='container'>
        <br/>
        <b>Female Preference</b> <span title="Whether females prefer to mate with males that match their template, have larger repertoire, or a mix of both.">&#128712;</span><br/>
        <div class="slidecontainer">
            Template Matching @MatFormat()
            <input bind="@RepPref" type="range" min="0" max="1" step=".01" class="slider"/>
            Larger Repertoire @RepFormat()
        </div>
    </div>
    <br/><hr>

    
    <h5><b><u>Evolvable, Song-learning Traits:</u></b>
        <span title="Initial +/- Noise is the distribution from which initial male values are drawn.  Noise is also used for chick inheritance, where chick values are drawn from the father’s value +/- Noise.">&#128712;</span><br/></h5>
    <div class='container'>
        <br/>
        <div style="float:left; width:250px;">
            <b>Accuracy</b> <span title="The chance that a learner will successfully learn a syllable he is attempting to learn.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <label>Initial</label>
                <input bind="@initACC" type="range" min="0" max="1" step=".01" class="slider" /> @initACC        
                <br/>
                <label>Noise</label> 
                <input bind="@NoiseACC" type="range" min="0" max=".5" step=".01" class="slider" /> @NoiseACC    
            </div>
        </div>
        <div>
            <b>Learning Threshold (years)</b> <span title="The age at which a bird stops learning.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <label>Initial</label>
                <input bind="@initLTH" type="range" min="0" max="@MaxAge" step=".25" class="slider" /> @initLTH        
                <br/>
                <label>Noise</label> 
                <input bind="@NoiseLTH" type="range" min="0" max="@(MaxAge/2)" step=".25" class="slider" /> @NoiseLTH    
            </div>
        </div>
    </div>
    <div style="clear: both;"></div>
    <br/>

    <div class='container'>
        <div style="float:left; width:250px;">
            <b>Chance to Forget</b> <span title="The chance that a learner will forget a syllable that he knows, but he did not hear his tutor(s) sing.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <label>Initial</label>
                <input bind="@initCTF" type="range" min="0" max="1" step=".01" class="slider" /> @initCTF        
                <br/>
                <label>Noise</label> 
                <input bind="@NoiseCTF" type="range" min="0" max=".5" step=".01" class="slider" /> @NoiseCTF    
            </div>
        </div>
        <div>
            <b>Chance to Invent</b> <span title="The chance that a learner will invent a new syllable if he fails to successfully learn a syllable">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <label>Initial</label>
                <input bind="@initCTI" type="range" min="0" max="1" step=".01" class="slider" /> @initCTI        
                <br/>
                <label>Noise</label> 
                <input bind="@NoiseCTI" type="range" min="0" max=".5" step=".01" class="slider" /> @NoiseCTI    
            </div>
        </div>
    </div>
    <div style="clear: both;"></div>
    <hr>
    
    <h5><b><u>Static Parameters:</u></b></h5>
    <div class='container'>
        <br/>
        <div style="float:left; width:250px;">
            <b>Learning Penalty</b> <span title="A survival penalty applied to birds with learning thresholds >1.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@LPen" type="range" min="0" max="5" step=".01" class="slider" />@LPen
            </div>
        </div>

        <div style="float:left; width:250px;">
            <b>Chick Survival</b> <span title="The proportion of chicks that survive to age 1.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@Chick" type="range" min=".1" max=".9" step=".01" class="slider" />@Chick
            </div>
        </div>
        <div style="clear: both;"></div>


        <div style="float:left; width:250px;">
            <b>Encounter Success</b> <span title="The chance that a learner meets tutors.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@EnSuc" type="range" min="0" max="1" step=".01" class="slider" />@EnSuc
            </div>
        </div>

        <div style="float:left; width:250px;">
            <b>Maximum Age (years)</b> <span title="The max age a bird can survive to.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input bind="@MaxAge" type="range" min="5" max="35" step="1" class="slider" oninput ="@FixAge"/>@MaxAge
            </div>
        </div>
        <div style="clear: both;"></div>
        <br/>

        <div>
            <b>Listening Threshold</b> <span title="The amount of a tutor’s repertoire a learner hears.">&#128712;</span><br/>
            <div class="slidecontainer"> 
                <input type = "radio" name="LisThresh" value="Syls" checked="@(LisSyls)" onchange="@SetListening" /> Number of Syllables<br/>
                <input type = "radio" name="LisThresh" value="Percen" checked="@(!LisSyls)" onchange="@SetListening" /> Fraction of Repertoire<br/>
                <input bind="@LisThrsh" type="range" min="@LisMin" max="@LisMax" step="@LisStep" class="slider" />@LisThrsh 
                <br/>
            </div>
        </div>
    </div>
    <div style="clear: both;"></div>
    <hr><hr>

    <div class='container' style="height=725px">
        <div style="float:left;width:250px;height:500px">
            <br/>
            <div style="text-align:center">
                <button onclick="@SetParam" disabled="@NotInitable" style="vertical-align:bottom;">Initialize</button>
                <img src="/Images/ZebMale1.png"/><br/>
            </div>
            <svg width="250" height="10">
                <rect width="250" height="1" y="5" style="fill:rgb(0,0,0);" />
            </svg>
            <b>Params: </b> @ParStatus<br/>
            <b>Timestep: </b> @CurrentStep <br/>
            <b>Status: </b>@Status<br/>
            <svg width="250" height="10">
                <rect width="250" height="1" y="5" style="fill:rgb(0,0,0);" />
            </svg>
            
            <b>Autoplay: </b>
            <button onclick="@AutoPlay" disabled ="@(@NotReady || !@NotRunning)">Play</button>
            <button onclick="@ResetRunning" disabled ="@(@NotReady || @NotRunning)">Pause</button><br/>
            <svg width="250" height="10">
                <rect width="250" height="1" y="5" style="fill:rgb(0,0,0);" />
            </svg>

            <button onclick="@(() => RunSimulation(Incre))" disabled ="@(@NotReady || !@NotRunning)">Next Steps</button><br/>
            <label>Timestep Increment:</label>
            <div class="slidecontainer"> 
                <input bind="@Incre" type="range" min="1" max="100" step="1" class="slider" />@Incre
            </div>
            <svg width="250" height="10">
                <rect width="250" height="1" y="5" style="fill:rgb(0,0,0);" />
            </svg>
            <b><u>Population Averages</u></b><br/>
            Repertoire: @AverageRep<br/>
            Match: @AverageMatch<br/>
            Accuracy: @AverageAcc<br/>
            Learning Threshold: @AverageLrnTh<br/>
            Chance to Forget: @AverageCtF<br/>
            Chance to Invent: @AverageCtI<br/>
            <svg width="250" height="10">
                <rect width="250" height="1" y="5" style="fill:rgb(0,0,0);" />
            </svg>
            <b>Age in Years:</b><br/>
            <img src='/Images/egg.png'>=0 &nbsp&nbsp<img src='/Images/Chick.png'>=1 &nbsp&nbsp<img src='/Images/AdultFlip.png'>=2+
        </div>
        <div style="float:left;width:602px;height:725px;" >
            <div style="width:602px;height:37px;text-align:center">
                <input type = "radio" name="ColorPlot" value="SyllableRep" checked="@(TableCol == 1)" onchange="@(() => QuickSwitch(1))" disabled ="@NotReady" /><span style="color:@RadioColor"> Syllable Rep</span>&nbsp;&nbsp;
                <input type = "radio" name="ColorPlot" value="Match" checked="@(TableCol == 2)" onchange="@(() => QuickSwitch(2))" disabled ="@(@NotReady || @NoMatch)" /><span style="color:@MatchColor"> Match</span>&nbsp;&nbsp;
                <input type = "radio" name="ColorPlot" value="Accuracy" checked="@(TableCol == 3)" onchange="@(() => QuickSwitch(3))" disabled ="@NotReady" /><span style="color:@RadioColor"> Accuracy</span>&nbsp;&nbsp;
                <input type = "radio" name="ColorPlot" value="LrnThresh" checked="@(TableCol == 4)" onchange="@(() => QuickSwitch(4))" disabled ="@NotReady" /><span style="color:@RadioColor"> Learning Threshold</span><br/>
            </div>
            <div style="width:602px;height:602px;border: 1px solid black">
                <table id="BirdMatrix">
                    <tr><td>Not Yet Initialized!</td></tr>
                </table>
            </div>
                0
                <svg height="25" width="555">
                    <defs>
                        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />
                        </linearGradient>
                    </defs>
                    <rect width="555" height="25" y="0" stroke-width="1" stroke="#000000" fill="url(#grad1)"/>
                </svg>
                @MAXscale
        </div>
    </div>
    <div style="clear: both;"></div>
    <br/><hr>
</div>


@functions {

    string ParStatus="None Set";
    int ParCount=0;
    int TableCol=1;
    bool ConTutDisabled=true;
    //bool StepsDisabled=true;
    bool NotReady=true;
    bool NoMatch=true;
    bool NotRunning=true;
    bool NotInitable=false;
    bool LisSyls=true;
    float LisMin=1f;
    float LisMax=10f;
    float LisStep=1f;
    string RadioColor="#b1b1b1";
    string MatchColor="#b1b1b1";
    string ConsenColor="#b1b1b1";
    float MAXscale = 100;

    //bool ScopeB=false;
    //bool ScopeT=false;
    int MaxAge=20;
    int RepSize=5;
    int NoTut=8;
    //int LSteps=1;
    double LisThrsh=7;
    double EnSuc=.95;
    double Chick=.3;
    double LPen=.75;
    double RepOH=.25;
    double initACC=.7;
    double NoiseACC=.15;
    double initLTH=2;
    double NoiseLTH=.25;
    double initCTI=.1;
    double NoiseCTI=0;
    double initCTF=.2;
    double NoiseCTF=0;
    double RepPref=1;
    string LearnStrat="Add";
    bool Oblique = true;

    Nullable<float> AverageRep=null;
    Nullable<float> AverageAcc=null;
    Nullable<float> AverageLrnTh=null;
    Nullable<float> AverageMatch=null;
    Nullable<float> AverageCtI=null;
    Nullable<float> AverageCtF=null;

    SimParams Par=new SimParams();
    Population Pop;
    int Incre=10;
    int CurrentStep=0;
    string Status="Not Running";

    string MatFormat(){
        return(String.Format("{0:0.00}",1-this.RepPref));
    }
    string RepFormat(){
        return(String.Format("{0:0.00}",this.RepPref));
    }
    void ResetRunning(){
        NotRunning=true;
    }
    int OH1(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH));
    }
    int OH2(){
        return(RepSize+Convert.ToInt32(RepSize*RepOH)*2);
    }
    void SetLearning(string value){
        if(value == "NoOblique"){
            Oblique = false;
            ConTutDisabled=true;
            ConsenColor="#b1b1b1";
        }else{
            LearnStrat=value;
            Oblique = true;
            if(value == "Consensus"){
                ConTutDisabled=false;
                ConsenColor="#00000";
            }else{
                ConTutDisabled=true;
                ConsenColor="#b1b1b1";
            }
        }
    }
    void SetListening(){
        LisSyls = !LisSyls;
        if(LisSyls){
            LisMin=1f;
            LisMax=10f;
            LisStep=1f;
            LisThrsh=7;
        }else{
            LisMin=.001f;
            LisMax=.999f;
            LisStep=.001f;
            LisThrsh=.1;
        }
    }
    void FixAge(){
        if(initLTH > MaxAge){
            initLTH = MaxAge;
        }
        if(NoiseLTH > MaxAge/2){
            NoiseLTH = MaxAge/2;
        }
        StateHasChanged();
    }
    /*void SetLocal(bool breed, bool value){
        if(breed){
            ScopeB=value;
        }else{
            ScopeT=value;
        }
        if(ScopeT == true || ScopeB == true){
            StepsDisabled=false;
        }else{
            StepsDisabled=true;
        }
    }*/
    

    async void SetParam(){
        ParStatus="Generating!";
        NotRunning=true;
        await Task.Run(StateHasChanged);
        Par=new SimParams(maxAge:MaxAge, //localBreeding:ScopeB, localTutor:ScopeT,
        initialSyllableRepertoireSize:RepSize,numTutorConsensusStrategy:NoTut,
        listeningThreshold:(float)LisThrsh,encounterSuccess:(float)EnSuc,
        chickSurvival:(float)Chick,learningPenalty:(float)LPen,
        percentSyllableOverhang:(float)RepOH,initialAccuracy:(float)initACC,
        inheritedAccuracyNoise:(float)NoiseACC,
        initialLearningThreshold:(float)initLTH,
        inheritedLearningThresholdNoise:(float)NoiseLTH,
        initialChancetoInvent:(float)initCTI,
        inheritedChancetoInventNoise:(float)NoiseCTI,
        initialChancetoForget:(float)initCTF, learningStrategy:LearnStrat,
        inheritedChancetoForgetNoise:(float)NoiseCTF, obliqueLearning:Oblique,
        matchPreference:(float)(1-RepPref),repertoireSizePreference:(float)RepPref);
        Pop=new Population(Par);
        AssignAves();
        ParCount+=1;
        CurrentStep=0;
        NotReady=false;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
        ParStatus=string.Format("{0}",ParCount);
        if(Par.MatchPreference > 0){
            NoMatch=false;
            MatchColor="#000000";
        }else{
            NoMatch=true;
            MatchColor="#b1b1b1";
            if(TableCol == 2){
                TableCol = 1;
            }
        }
        RadioColor = "#000000";
        StateHasChanged();
    }
    async void AutoPlay(){
        this.NotInitable=true;
        NotRunning=false;
        this.Status="Running";
        StateHasChanged();
        while(!NotRunning){
            RunSimulation(1, false);
            await Task.Delay(100);
        }
        this.Status="Not Running";
        this.NotInitable=false;
        StateHasChanged();
    }
    async void RunSimulation(int inc, bool stepped=true){
        if(stepped){
            this.NotInitable=true;
            this.Status="Running";
            this.NotReady=true;
            this.RadioColor="#b1b1b1";
            StateHasChanged();
            await Task.Delay(5);
        }
        for(int i=0;i<inc;i++){
            this.Pop=Simulations.WebSim(this.Par,this.Pop,1);
             this.CurrentStep+=1;
            if(stepped){
                StateHasChanged();
                await Task.Delay(5);               
            }
        }
        if(stepped){
            this.NotReady=false;
            this.RadioColor="#000000";
            this.Status="Not Running";
            this.NotInitable=false;
        }
        AssignAves();
        await PromptInterop.BirdMatrixUpdate(this.Pop.Age, SetColors(this.TableCol, this.Pop));
        StateHasChanged();
    } 

    void AssignAves(){
        this.AverageRep=(float)Pop.SyllableRepertoire.Average();
        this.AverageAcc=(float)Pop.Accuracy.Average();
        this.AverageLrnTh=(float)Pop.LearningThreshold.Average();
        this.AverageMatch=(float)Pop.Match.Average();
        this.AverageCtI=(float)Pop.ChanceInvent.Average();
        this.AverageCtF=(float)Pop.ChanceForget.Average();
    }

    string[] SetColors(int color, Population Pop){
        float[] VarNeeded;
        float MIN;
        float BinSize;
        int Converted;
        string[] FinalColor;
        if(color == 1){
            VarNeeded = Array.ConvertAll(Pop.SyllableRepertoire, x => (float)x);
            this.MAXscale=VarNeeded.Max();
            if(this.MAXscale < 100){
                this.MAXscale = 100;
            }
        }else if(color == 2){
            VarNeeded = Pop.Match;
            this.MAXscale=1;
        }else if(color==3){
            VarNeeded = Pop.Accuracy;
            this.MAXscale=1;
        }else{
            VarNeeded = Pop.LearningThreshold;
            this.MAXscale=Par.MaxAge;
        }
        MIN=0;
        BinSize=(this.MAXscale-MIN)/15;
        
        FinalColor = new string[VarNeeded.Length];
        for(int i=0;i<VarNeeded.Length;i++){
            Converted = 255-(int)((((int)((VarNeeded[i]-MIN)/BinSize))/15f)*255);
            FinalColor[i] = string.Format("rgb({0},{1},{2})", 255,Converted,Converted);
        }
        return(FinalColor);
    }
    async void QuickSwitch(int type){
        this.TableCol = type;
        await PromptInterop.BirdMatrixUpdate(Pop.Age, SetColors(TableCol, Pop));
    }
}
